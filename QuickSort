//单路快速排序
template<typename T>
int __partition(T arr[],int l,int r)
{
	T v=arr[l];
	int j=l;
	for(int i=l+1;i<=r;i++){
		if(arr[i]<v){
			swap(arr[i],arr[j+1]);
			j++;
		}
	}
	swap(arr[l],arr[j]);
	return j;
}
template<typename T>
void __quickSort(T arr[],int l,int r)
{
	if(l>=r)
		return;
	int p=__partition(arr,l,r);
	__quickSort(arr,l,p-1);
	__quickSort(arr,p+1,r);	
}
template<typename T>
void quickSort(T arr[],int n)
{
	__quickSort(arr,0,n-1);
}

//双路快速排序
template<typename T>
int __partition2(T arr[],int l,int r)
{
	swap(arr[l],arr[rand()%(r-l+1)+l]);
	T v=arr[l];
	int i=l+1,j=r;
	while(1){
		while(arr[i]<=v&&i<=r){
			i++;
		}
		while(arr[j]>=v&&j>l){
			j--;
		}
		if(i>j)
			break;
		swap(arr[i],arr[j]);
		i++;
		j--;
	}
	swap(arr[l],arr[j]);
	return j;
}
template<typename T>
void __quickSort2ways(T arr[],int l,int r)
{
	if(l>=r)
		return;
	int j=__partition2(arr,l,r);
	__quickSort2ways(arr,0,j-1);
	__quickSort2ways(arr,j+1,r);
}
template<typename T>
void quickSort2ways(T arr[],int n)
{
	srand(time(NULL));
	__quickSort2ways(arr,0,n-1);
}

//三路快速排序
template<typename T>
void __quickSort3ways(T arr[],int l,int r)
{
	if(l>=r)
		return;
	swap(arr[l],arr[rand()%(r-l+1)+l]);
	T v=arr[l];
	int i=l+1,lt=l,gt=r+1;
	while(i<gt){
		if(arr[i]<v){
			swap(arr[i],arr[lt+1]);
			i++;
			lt++;
		}
		else if(arr[i]>v){
			swap(arr[i],arr[gt-1]);
			gt--;
		}
		else{
			i++;
		}
	}
	swap(arr[l],arr[lt]);
	__quickSort3ways(arr,0,lt-1);
	__quickSort3ways(arr,gt,r);
}
template<typename T>
void quickSort3ways(T arr[],int n)
{
	srand(time(NULL));
	__quickSort3ways(arr,0,n-1);
}